# acarelia/docker-compose.yml
services:
  rabbitmq:
    image: rabbitmq:3-management
    container_name: acarelia_rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:6
    container_name: acarelia_redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: acarelia_redis_commander
    depends_on:
      redis:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379

  gateway-api:
    build:
      context: .
      dockerfile: apps/gateway-api/Dockerfile
    container_name: acarelia_gateway_api
    env_file:
      - .env
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8000:8000"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 15s
      timeout: 5s
      retries: 3
  
  scholar-scraper:
    build:
      context: .
      dockerfile: apps/scholar-scraper/Dockerfile
    container_name: acarelia_scholar_scraper
    env_file:
      - .env
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  doi-resolver:
    build:
      context: .
      dockerfile: apps/doi-resolver/Dockerfile
    container_name: acarelia_doi_resolver
    env_file:
      - .env
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped